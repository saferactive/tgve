{"version":3,"sources":["Header.jsx","utils.js","Layers.jsx","About.jsx","App.js","reportWebVitals.js","index.js"],"names":["history","createBrowserHistory","navs","key","to","title","Header","props","switchComponent","Navbar","inverse","collapseOnSelect","Brand","onClick","push","style","cursor","fontSize","className","Toggle","Collapse","Nav","map","item","i","NavItem","eventKey","pullRight","href","layers","name","description","gc","gURL","dURL","buttons","forEach","e","value","callback","index","React","setValue","onChange","currentTarget","About","state","markdown","fetch","then","response","text","setState","marked","this","background","padding","dangerouslySetInnerHTML","__html","Component","App","useState","layerIndex","setLayerIndex","tgve","setTgve","route","setRoute","useEffect","defaultURL","geographyURL","geographyColumn","dark","hideCharts","hideChartGenerator","viewport","longitude","latitude","zoom","pitch","bearing","leftSidebarContent","Layers","length","newRoute","document","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8d9f1fb4.chunk.js","sourcesContent":["/**\n * geoplumber R package code.\n */\nimport React from 'react';\nimport { Navbar, Nav, NavItem } from 'react-bootstrap';\nimport { createBrowserHistory } from 'history'\nconst history = createBrowserHistory()\n\nconst navs = [\n  {\n    key: 1,\n    to: \"about\",\n    title: \"About\"\n  },\n];\n\nfunction Header(props) {\n  const { switchComponent } = props;\n  return (\n    <Navbar inverse={true} collapseOnSelect>\n      <Navbar.Header>\n        <Navbar.Brand>\n          <i \n            onClick={() => {\n              history.push(\"\")\n              typeof switchComponent === 'function' \n              && switchComponent(null)\n            }}\n            style={{ \n              cursor: 'pointer',\n              fontSize: '1.2em' }} \n              className=\"fa fa-home\"></i>\n          \n        </Navbar.Brand>\n        <Navbar.Toggle />\n      </Navbar.Header>\n      <Navbar.Collapse>\n        <Nav>\n          {\n            navs.map((item, i) => {\n              return (\n                <NavItem\n                  key={i}\n                  eventKey={item.key}\n                  onClick={() => { \n                    history.push(item.to)\n                    typeof switchComponent === 'function' \n                    && switchComponent('about')\n                    }}>\n                  {item.title}\n                </NavItem>\n              )\n            })\n          }\n        </Nav>\n        <Nav pullRight>\n          <NavItem href=\"https://github.com/saferactive\">\n            <i style={{ fontSize: '1.5em' }} className=\"fa fa-github\"></i>\n          </NavItem>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar >\n  )\n}\n\n// thanks to https://stackoverflow.com/a/42124328/2332101\nexport default Header;\n","const layers = [\n  {\n    name: \"Local Authority District\",\n    description: \"District level cycle casualty KSI (Killed or Seriously Injured) statistics, 2010 - 2019\",\n    gc: \"la_code\",\n    gURL: \"https://raw.githubusercontent.com/saferactive/tgve/main/las-only-code.geojson\",\n    dURL: \"https://raw.githubusercontent.com/saferactive/tgve/main/ksi.csv\"\n  },\n  {\n    name: \"Police Force\",\n    description: \"Police force level cycle casualty KSI statistics, 2010 - 2019\",\n    gc: \"police_force\",\n    gURL: \"https://raw.githubusercontent.com/saferactive/tgve/main/pf-only-name.geojson\",\n    dURL: \"https://raw.githubusercontent.com/saferactive/tgve/main/ksi-pf.csv\"\n  }];\n\nexport {\n  layers\n}","import * as React from \"react\";\nimport { RadioGroup, Radio } from \"baseui/radio\";\nimport { layers } from './utils';\n\n/**\n * align: ALIGN.vertical does not work\n * so does\n * {layers.map((e, i) =>\n        <>\n          <Radio\n          value={i + \"\"}>\n          {e.name}\n        </Radio><br/>\n        </>)\n      } i\n  * insideRadioGroup\n  * hence below\n */\nconst buttons = [];\nlayers.forEach((e, i) => {\n  buttons.push(\n    <Radio\n      description={e.description}\n      value={i + \"\"}>\n      {e.name}\n    </Radio>\n  )\n  if(i % 2 === 0) buttons.push(<br/>)\n})\nexport default (props) => {\n  const { callback, index } = props;\n  const [value, setValue] = React.useState(index || \"0\");\n  return (\n    <RadioGroup\n      value={value}\n      onChange={e => {\n        typeof callback === 'function'\n          && callback(+e.currentTarget.value)\n        setValue(e.currentTarget.value)\n      }}\n      name=\"number\"\n    // align=\"vertical\"\n    >\n    {buttons}\n    </RadioGroup>\n  );\n}","import React, { Component } from 'react';\nimport marked from \"marked\";\n\n/**\n * Separate the Header and the main content.\n * Up to this point we are still not using SSR\n */\nclass About extends Component {\n  state = { markdown: null }\n  componentDidMount() {\n    const readmePath = \"https://raw.githubusercontent.com/saferactive/tgve/main/README.md\";\n\n    fetch(readmePath)\n      .then(response => {\n        return response.text()\n      })\n      .then(text => {\n        this.setState({\n          markdown: marked(text)\n        })\n      })\n  }\n  render() {\n    const { markdown } = this.state;\n\n    return (\n      <section style={{ background: 'white', padding: '5%' }}>\n        <article dangerouslySetInnerHTML={{ __html: markdown }}></article>\n      </section>\n    )\n  }\n}\n\nexport default About;","import React, { useEffect, useState } from 'react';\n\nimport Eatlas from 'eatlas';\nimport Header from './Header';\n\nimport { layers } from './utils';\nimport Layers from './Layers';\nimport About from './About';\nimport './App.css';\n\nfunction App() {\n\n  const [layerIndex, setLayerIndex] = useState(0)\n  const [tgve, setTgve] = useState(null);\n  const [route, setRoute] = useState(null)\n  useEffect(() => {\n    const tgveInstance = (defaultURL, geographyURL, geographyColumn) => {\n      return (\n        <Eatlas dark={true}\n          key={defaultURL}\n          hideCharts={true}\n          hideChartGenerator={true}\n          viewport={{ longitude: 0,\n            latitude: 53,\n            zoom: 5.5,\n            pitch: 0,\n            bearing: 0}}\n          geographyColumn={geographyColumn}\n          geographyURL={geographyURL}\n          defaultURL={defaultURL}\n          leftSidebarContent={\n            <div>\n              <Layers\n                index={layerIndex + \"\"}\n                callback={(index) => {\n                  if (index < 0) setLayerIndex(0)\n                  if (index >= layers.length) setLayerIndex(layers.length - 1)\n                  setLayerIndex(index)\n                }} />\n            </div>\n          } />\n      )\n    }\n    // console.log(layerIndex)\n    setTgve(tgveInstance(layers[layerIndex].dURL,\n      layers[layerIndex].gURL,\n      layers[layerIndex].gc\n    ))\n  }, [layerIndex])\n  // console.log(layers[layerIndex].gc)\n  return (\n    <>\n      <Header dark={true}\n        // can we manage without router?\n        switchComponent={(newRoute) => {\n          if (!newRoute) {\n            // reset\n            document.title = \"SaferActive\"\n            setRoute(null)\n          } else {\n            document.title = \"SaferActive | About\"\n            setRoute(newRoute)\n          }\n        }}\n      />\n      {!route ? tgve : <About />}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}